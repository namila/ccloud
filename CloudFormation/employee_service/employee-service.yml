Parameters:

  DockerImage:
    Description: Employee service docker image
    Type: String
    Default: namila/ccloud-employee-service
  VPC:
    Description: VPC
    Type: AWS::EC2::VPC::Id
  
  Cluster:
    Description: ECS Cluster
    Type: String
  
  Replication:
    Description: replica count
    Type: Number
    Default: 2

  MaxReplication:
    Description: Maximum replication
    Type: Number
    Default: 4
  
  LoadBalancerListener:
    Description: load balancer listener
    Type: String
  
  ServicePath:
    Description: Path for the load balancer to route
    Type: String
    Default: /employees

  HealthCheckPath:
    Description: Path for the load balancer to check health
    Type: String
    Default: /health

  ContainerPort:
    Description: Port exposed by the container
    Type: Number
    Default: 3000

  ServiceAutoScalingRoleARN:
    Description: Service autoscalling roll ARN
    Type: String


Resources:

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2



  LoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref ServicePath
      Actions:
        - TargetGroupArn: !Ref LoadBalancerTargetGroup
          Type: forward


  EmployeeServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub employee-service-role-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": [ "ecs.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies:
        - PolicyName: ccloud-load-balancer-policy
          PolicyDocument: |
            {
              "Statement": [{
                "Effect": "Allow",
                "Action": "*",
                "Resource": "*"
              }]
            }

    

  EmployeeServiceAppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-app
      RetentionInDays: 365

  EmployeeServiceDbLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-db
      RetentionInDays: 365

  EmployeeServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ccloud-employee-service
      ContainerDefinitions:

        - Name: ccloud-employee-db
          Essential: false
          Image: mongo:4.0
          MemoryReservation: 128
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref EmployeeServiceDbLogGroup
              awslogs-region: !Ref AWS::Region

        - Name: ccloud-employee-app
          Essential: true
          Image: !Ref DockerImage
          Links:
            - ccloud-employee-db
          MemoryReservation: 128
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref EmployeeServiceAppLogGroup
              awslogs-region: !Ref AWS::Region
  
  CCloudEmployeeService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListenerRule
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref EmployeeServiceRole
      DesiredCount: !Ref Replication
      TaskDefinition: !Ref EmployeeServiceTaskDefinition
      LoadBalancers:
        - ContainerName: ccloud-employee-app
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref LoadBalancerTargetGroup

  CCloudEmployeeServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxReplication
      MinCapacity: !Ref Replication
      ResourceId: !Join
        - /
        - - service
          - !Ref Cluster
          - !GetAtt CCloudEmployeeService.Name
      RoleARN: !Ref ServiceAutoScalingRoleARN
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs


  CCloudEmployeeServiceScaleOutPolicy:
    Type: AWS::ApplicationAutoScalling::ScalingPolicy
    Properties:
      PolicyName: CCloudEmployeeServiceScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref CCloudEmployeeServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 120
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1



  CCloudEmployeeServiceMemoryScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Memory Utilization more than 40 percentage
      Namespace: AWS/ECS
      MetricName: MemoryUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !GetAtt CCloudEmployeeService.Name
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 2
      Threshold: 40
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref CCloudEmployeeServiceScaleOutPolicy





